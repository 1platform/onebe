import IAppInfo from "@/App/IAppInfo";
import { Constructor } from "@/Documentation/MetadataTypes";
import Config from "@/System/Config";
import { getVersion } from "@/version";

/**
 * Custom type used to define an Object element that can be added to the
 * Application object and reused throughout the application.
 */
export type ApplicationObject = Constructor;

/**
 * Custom type used to define Functions that can be added to the Application
 * object and reused throughout the application.
 */
export type GenericFunction = (...args: any) => any;

/**
 * The entry point of your application. This class should be used through
 * the `app` object exposed globally from the index file of this module.
 *
 * The Application object stores basic information about the application like:
 * the name of the application, the version of the application, a description of it
 * and the public URL used to access the application. This information is automatically
 * added to the documentation files generated by the framework for your application.
 */
export default class App {
  /**
   * Any extra object or function defined in the Application object.
   */
  [key: string]: any;

  /**
   * A list with all the objects and functions attached to the Application object.
   */
  private _elements: Array<ApplicationObject | GenericFunction> = [];

  /**
   * Internal object used to get the information about the application.
   */
  private _appInfo: IAppInfo = {
    name: "onebe",
    version: getVersion(),
    appName: Config.string("app.name"),
    appVersion: Config.string("app.version"),
    appDescription: Config.string("app.description"),
    appURL: Config.string("http.url"),
  };

  /**
   * Return the Application information object.
   */
  public get app(): IAppInfo {
    return this._appInfo;
  }

  /**
   * Set the Application information object.
   *
   * @param appInfo The new Application information object.
   */
  public set app(appInfo: IAppInfo) {
    if (typeof appInfo !== "object") {
      return;
    }

    this._appInfo = Object.assign(
      {
        appName: "One Backend by Spark",
        appVersion: this._appInfo.version,
        appDescription: "A custom application developed for web",
        appURL: Config.string("http.url"),
      },
      {
        ...appInfo,
        name: this._appInfo.name,
        version: this._appInfo.version,
      }
    );
  }

  /**
   * Add a class instance to the Application object in order to reuse it later.
   *
   * @param ReusableClass The class for which we want to add an instance to the application object.
   */
  public use(ReusableClass: ApplicationObject): void {
    const element = new ReusableClass();
    this._elements[element.constructor.name] = element;

    Object.defineProperty(this, element.constructor.name, {
      get: () => this._elements[element.constructor.name],
      configurable: true,
    });
  }

  /**
   * Add a function to the Application object in order to reuse it later.
   *
   * @param reusableFunction The function we want to attach to the application object.
   */
  public hook(reusableFunction: GenericFunction): void {
    this._elements[reusableFunction.name] = reusableFunction.bind(this);
    Object.defineProperty(this, reusableFunction.name, {
      get: () => this._elements[reusableFunction.name],
      configurable: true,
    });
  }
}
