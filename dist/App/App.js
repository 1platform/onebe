"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Config = _interopRequireDefault(require("../System/Config"));

var _version = require("../version");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * The entry point of your application. This class should be used through
 * the `app` object exposed globally from the index file of this module.
 *
 * The Application object stores basic information about the application like:
 * the name of the application, the version of the application, a description of it
 * and the public URL used to access the application. This information is automatically
 * added to the documentation files generated by the framework for your application.
 */
class App {
  constructor() {
    _defineProperty(this, "_elements", []);

    _defineProperty(this, "_appInfo", {
      name: "onebe",
      version: (0, _version.getVersion)(),
      appName: _Config.default.string("app.appName"),
      appVersion: _Config.default.string("app.appVersion"),
      appDescription: _Config.default.string("app.appDescription"),
      appURL: _Config.default.string("http.url")
    });
  }

  /**
   * Return the Application information object.
   */
  get app() {
    return this._appInfo;
  }
  /**
   * Set the Application information object.
   *
   * @param appInfo The new Application information object.
   */


  set app(appInfo) {
    if (typeof appInfo !== "object") {
      return;
    }

    this._appInfo = Object.assign({
      appName: "One Backend by Spark",
      appVersion: this._appInfo.version,
      appDescription: "A custom application developed for web",
      appURL: _Config.default.string("http.url")
    }, _objectSpread(_objectSpread({}, appInfo), {}, {
      name: this._appInfo.name,
      version: this._appInfo.version
    }));
  }
  /**
   * Add a class instance to the Application object in order to reuse it later.
   *
   * @param ReusableClass The class for which we want to add an instance to the application object.
   */


  use(ReusableClass) {
    const element = new ReusableClass();
    this._elements[element.constructor.name] = element;
    Object.defineProperty(this, element.constructor.name, {
      get: () => this._elements[element.constructor.name],
      configurable: true
    });
  }
  /**
   * Add a function to the Application object in order to reuse it later.
   *
   * @param reusableFunction The function we want to attach to the application object.
   */


  hook(reusableFunction) {
    this._elements[reusableFunction.name] = reusableFunction.bind(this);
    Object.defineProperty(this, reusableFunction.name, {
      get: () => this._elements[reusableFunction.name],
      configurable: true
    });
  }

}

exports.default = App;